#include <td/gl/enum.h>

namespace td {

const std::unordered_map<GLenum, const char*> gl_enum_string_map = {
    // DEBUG_SOURCE
    { GL_DEBUG_SOURCE_API, "API" },
    { GL_DEBUG_SOURCE_WINDOW_SYSTEM, "WINDOW_SYSTEM" },
    { GL_DEBUG_SOURCE_SHADER_COMPILER, "SHADER_COMPILER" },
    { GL_DEBUG_SOURCE_THIRD_PARTY, "THIRD_PARTY" },
    { GL_DEBUG_SOURCE_APPLICATION, "APPLICATION" },
    { GL_DEBUG_SOURCE_OTHER, "OTHER" },

    // DEBUG_TYPE
    { GL_DEBUG_TYPE_ERROR, "ERROR" },
    { GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR, "DEPRECATED_BEHAVIOR" },
    { GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, "UNDEFINED_BEHAVIOR" },
    { GL_DEBUG_TYPE_PORTABILITY, "PORTABILITY" },
    { GL_DEBUG_TYPE_PERFORMANCE, "PERFORMANCE" },
    { GL_DEBUG_TYPE_MARKER, "MARKER" },
    { GL_DEBUG_TYPE_PUSH_GROUP, "PUSH_GROUP" },
    { GL_DEBUG_TYPE_POP_GROUP, "POP_GROUP" },
    { GL_DEBUG_TYPE_OTHER, "OTHER" },

    // DEBUG_SEVERITY
    { GL_DEBUG_SEVERITY_HIGH, "HIGH" },
    { GL_DEBUG_SEVERITY_MEDIUM, "MEDIUM" },
    { GL_DEBUG_SEVERITY_LOW, "LOW" },
    { GL_DEBUG_SEVERITY_NOTIFICATION, "NOTIFICATION" },

    // DATA_TYPE
    { GL_FLOAT, "FLOAT" },
    { GL_FLOAT_VEC2, "FLOAT_VEC2" },
    { GL_FLOAT_VEC3, "FLOAT_VEC3" },
    { GL_FLOAT_VEC4, "FLOAT_VEC4" },
    { GL_DOUBLE, "DOUBLE" },
    { GL_DOUBLE_VEC2, "DOUBLE_VEC2" },
    { GL_DOUBLE_VEC3, "DOUBLE_VEC3" },
    { GL_DOUBLE_VEC4, "DOUBLE_VEC4" },
    { GL_INT, "INT" },
    { GL_INT_VEC2, "INT_VEC2" },
    { GL_INT_VEC3, "INT_VEC3" },
    { GL_INT_VEC4, "INT_VEC4" },
    { GL_UNSIGNED_INT, "UNSIGNED_INT" },
    { GL_UNSIGNED_INT_VEC2, "UNSIGNED_INT_VEC2" },
    { GL_UNSIGNED_INT_VEC3, "UNSIGNED_INT_VEC3" },
    { GL_UNSIGNED_INT_VEC4, "UNSIGNED_INT_VEC4" },
    { GL_BOOL, "BOOL" },
    { GL_BOOL_VEC2, "BOOL_VEC2" },
    { GL_BOOL_VEC3, "BOOL_VEC3" },
    { GL_BOOL_VEC4, "BOOL_VEC4" },
    { GL_FLOAT_MAT2, "FLOAT_MAT2" },
    { GL_FLOAT_MAT3, "FLOAT_MAT3" },
    { GL_FLOAT_MAT4, "FLOAT_MAT4" },
    { GL_FLOAT_MAT2x3, "FLOAT_MAT2x3" },
    { GL_FLOAT_MAT2x4, "FLOAT_MAT2x4" },
    { GL_FLOAT_MAT3x2, "FLOAT_MAT3x2" },
    { GL_FLOAT_MAT3x4, "FLOAT_MAT3x4" },
    { GL_FLOAT_MAT4x2, "FLOAT_MAT4x2" },
    { GL_FLOAT_MAT4x3, "FLOAT_MAT4x3" },
    { GL_DOUBLE_MAT2, "DOUBLE_MAT2" },
    { GL_DOUBLE_MAT3, "DOUBLE_MAT3" },
    { GL_DOUBLE_MAT4, "DOUBLE_MAT4" },
    { GL_DOUBLE_MAT2x3, "DOUBLE_MAT2x3" },
    { GL_DOUBLE_MAT2x4, "DOUBLE_MAT2x4" },
    { GL_DOUBLE_MAT3x2, "DOUBLE_MAT3x2" },
    { GL_DOUBLE_MAT3x4, "DOUBLE_MAT3x4" },
    { GL_DOUBLE_MAT4x2, "DOUBLE_MAT4x2" },
    { GL_DOUBLE_MAT4x3, "DOUBLE_MAT4x3" },
    { GL_SAMPLER_1D, "SAMPLER_1D" },
    { GL_SAMPLER_2D, "SAMPLER_2D" },
    { GL_SAMPLER_3D, "SAMPLER_3D" },
    { GL_SAMPLER_CUBE, "SAMPLER_CUBE" },
    { GL_SAMPLER_1D_SHADOW, "SAMPLER_1D_SHADOW" },
    { GL_SAMPLER_2D_SHADOW, "SAMPLER_2D_SHADOW" },
    { GL_SAMPLER_1D_ARRAY, "SAMPLER_1D_ARRAY" },
    { GL_SAMPLER_2D_ARRAY, "SAMPLER_2D_ARRAY" },
    { GL_SAMPLER_1D_ARRAY_SHADOW, "SAMPLER_1D_ARRAY_SHADOW" },
    { GL_SAMPLER_2D_ARRAY_SHADOW, "SAMPLER_2D_ARRAY_SHADOW" },
    { GL_SAMPLER_2D_MULTISAMPLE, "SAMPLER_2D_MULTISAMPLE" },
    { GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "SAMPLER_2D_MULTISAMPLE_ARRAY" },
    { GL_SAMPLER_CUBE_SHADOW, "SAMPLER_CUBE_SHADOW" },
    { GL_SAMPLER_BUFFER, "SAMPLER_BUFFER" },
    { GL_SAMPLER_2D_RECT, "SAMPLER_2D_RECT" },
    { GL_SAMPLER_2D_RECT_SHADOW, "SAMPLER_2D_RECT_SHADOW" },
    { GL_INT_SAMPLER_1D, "INT_SAMPLER_1D" },
    { GL_INT_SAMPLER_2D, "INT_SAMPLER_2D" },
    { GL_INT_SAMPLER_3D, "INT_SAMPLER_3D" },
    { GL_INT_SAMPLER_CUBE, "INT_SAMPLER_CUBE" },
    { GL_INT_SAMPLER_1D_ARRAY, "INT_SAMPLER_1D_ARRAY" },
    { GL_INT_SAMPLER_2D_ARRAY, "INT_SAMPLER_2D_ARRAY" },
    { GL_INT_SAMPLER_2D_MULTISAMPLE, "INT_SAMPLER_2D_MULTISAMPLE" },
    { GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "INT_SAMPLER_2D_MULTISAMPLE_ARRAY" },
    { GL_INT_SAMPLER_BUFFER, "INT_SAMPLER_BUFFER" },
    { GL_INT_SAMPLER_2D_RECT, "INT_SAMPLER_2D_RECT" },
    { GL_UNSIGNED_INT_SAMPLER_1D, "UNSIGNED_INT_SAMPLER_1D" },
    { GL_UNSIGNED_INT_SAMPLER_2D, "UNSIGNED_INT_SAMPLER_2D" },
    { GL_UNSIGNED_INT_SAMPLER_3D, "UNSIGNED_INT_SAMPLER_3D" },
    { GL_UNSIGNED_INT_SAMPLER_CUBE, "UNSIGNED_INT_SAMPLER_CUBE" },
    { GL_UNSIGNED_INT_SAMPLER_1D_ARRAY, "UNSIGNED_INT_SAMPLER_1D_ARRAY" },
    { GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, "UNSIGNED_INT_SAMPLER_2D_ARRAY" },
    { GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE" },
    { GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY" },
    { GL_UNSIGNED_INT_SAMPLER_BUFFER, "UNSIGNED_INT_SAMPLER_BUFFER" },
    { GL_UNSIGNED_INT_SAMPLER_2D_RECT, "UNSIGNED_INT_SAMPLER_2D_RECT" },
    { GL_IMAGE_1D, "IMAGE_1D" },
    { GL_IMAGE_2D, "IMAGE_2D" },
    { GL_IMAGE_3D, "IMAGE_3D" },
    { GL_IMAGE_2D_RECT, "IMAGE_2D_RECT" },
    { GL_IMAGE_CUBE, "IMAGE_CUBE" },
    { GL_IMAGE_BUFFER, "IMAGE_BUFFER" },
    { GL_IMAGE_1D_ARRAY, "IMAGE_1D_ARRAY" },
    { GL_IMAGE_2D_ARRAY, "IMAGE_2D_ARRAY" },
    { GL_IMAGE_2D_MULTISAMPLE, "IMAGE_2D_MULTISAMPLE" },
    { GL_IMAGE_2D_MULTISAMPLE_ARRAY, "IMAGE_2D_MULTISAMPLE_ARRAY" },
    { GL_INT_IMAGE_1D, "INT_IMAGE_1D" },
    { GL_INT_IMAGE_2D, "INT_IMAGE_2D" },
    { GL_INT_IMAGE_3D, "INT_IMAGE_3D" },
    { GL_INT_IMAGE_2D_RECT, "INT_IMAGE_2D_RECT" },
    { GL_INT_IMAGE_CUBE, "INT_IMAGE_CUBE" },
    { GL_INT_IMAGE_BUFFER, "INT_IMAGE_BUFFER" },
    { GL_INT_IMAGE_1D_ARRAY, "INT_IMAGE_1D_ARRAY" },
    { GL_INT_IMAGE_2D_ARRAY, "INT_IMAGE_2D_ARRAY" },
    { GL_INT_IMAGE_2D_MULTISAMPLE, "INT_IMAGE_2D_MULTISAMPLE" },
    { GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "INT_IMAGE_2D_MULTISAMPLE_ARRAY" },
    { GL_UNSIGNED_INT_IMAGE_1D, "UNSIGNED_INT_IMAGE_1D" },
    { GL_UNSIGNED_INT_IMAGE_2D, "UNSIGNED_INT_IMAGE_2D" },
    { GL_UNSIGNED_INT_IMAGE_3D, "UNSIGNED_INT_IMAGE_3D" },
    { GL_UNSIGNED_INT_IMAGE_2D_RECT, "UNSIGNED_INT_IMAGE_2D_RECT" },
    { GL_UNSIGNED_INT_IMAGE_CUBE, "UNSIGNED_INT_IMAGE_CUBE" },
    { GL_UNSIGNED_INT_IMAGE_BUFFER, "UNSIGNED_INT_IMAGE_BUFFER" },
    { GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "UNSIGNED_INT_IMAGE_1D_ARRAY" },
    { GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "UNSIGNED_INT_IMAGE_2D_ARRAY" },
    { GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "UNSIGNED_INT_IMAGE_2D_MULTISAMPLE" },
    { GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY" },
    { GL_UNSIGNED_INT_ATOMIC_COUNTER, "UNSIGNED_INT_ATOMIC_COUNTER" }

};

const char* gl_enum_string(GLenum v, const char* default_value) {
    auto iter = gl_enum_string_map.find(v);
    if (iter == gl_enum_string_map.end()) {
        return default_value;
    }
    return iter->second;
}

}
